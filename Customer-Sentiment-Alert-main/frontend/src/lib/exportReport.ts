import type { SentimentRecord, Alert, Stats } from '../App'

export interface ReportData {
  sentiments: SentimentRecord[]
  alerts: Alert[]
  stats: Stats | null
  generatedAt: string
}

export function exportAsJSON(data: ReportData) {
  const json = JSON.stringify(data, null, 2)
  const blob = new Blob([json], { type: 'application/json' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = `sentiguard-report-${new Date().toISOString().split('T')[0]}.json`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

export function exportAsCSV(data: ReportData) {
  // Create CSV header
  const headers = [
    'Timestamp',
    'Source',
    'Author',
    'Text',
    'Sentiment Score',
    'Sentiment Label',
    'Confidence',
    'Top Emotion'
  ]

  // Create CSV rows
  const rows = data.sentiments.map(s => {
    const topEmotion = s.emotions 
      ? Object.entries(s.emotions).sort((a, b) => b[1] - a[1])[0]?.[0] || 'N/A'
      : 'N/A'

    return [
      s.created_at,
      s.source,
      s.author,
      `"${s.text.replace(/"/g, '""')}"`, // Escape quotes
      s.sentiment_score.toFixed(3),
      s.sentiment_label,
      s.confidence.toFixed(3),
      topEmotion
    ]
  })

  // Combine headers and rows
  const csv = [
    headers.join(','),
    ...rows.map(row => row.join(','))
  ].join('\n')

  const blob = new Blob([csv], { type: 'text/csv' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = `sentiguard-report-${new Date().toISOString().split('T')[0]}.csv`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

export function exportSummaryReport(data: ReportData) {
  const { stats, alerts, sentiments } = data
  
  const summary = `
SENTIGUARD SENTIMENT ANALYSIS REPORT
Generated: ${new Date().toLocaleString()}
=====================================

OVERVIEW
--------
Total Mentions: ${stats?.total || 0}
Positive: ${stats?.positive || 0} (${stats ? Math.round((stats.positive / stats.total) * 100) : 0}%)
Negative: ${stats?.negative || 0} (${stats ? Math.round((stats.negative / stats.total) * 100) : 0}%)
Neutral: ${stats?.neutral || 0} (${stats ? Math.round((stats.neutral / stats.total) * 100) : 0}%)
Average Score: ${stats?.average_score.toFixed(3) || 'N/A'}

ALERTS
------
Total Alerts: ${alerts.length}
Critical: ${alerts.filter(a => a.severity === 'critical').length}
High: ${alerts.filter(a => a.severity === 'high').length}
Medium: ${alerts.filter(a => a.severity === 'medium').length}
Low: ${alerts.filter(a => a.severity === 'low').length}

SOURCE BREAKDOWN
----------------
${stats?.by_source ? Object.entries(stats.by_source)
  .map(([source, data]) => `${source.toUpperCase()}: ${data.count} mentions (avg: ${data.avg_score.toFixed(2)})`)
  .join('\n') : 'No data'}

RECENT NEGATIVE MENTIONS
------------------------
${sentiments
  .filter(s => s.sentiment_score < -0.3)
  .slice(0, 10)
  .map((s, i) => `${i + 1}. [${s.source}] @${s.author}: "${s.text.substring(0, 100)}..." (Score: ${s.sentiment_score.toFixed(2)})`)
  .join('\n\n')}

=====================================
Report generated by SentiGuard v1.0
`

  const blob = new Blob([summary], { type: 'text/plain' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = `sentiguard-summary-${new Date().toISOString().split('T')[0]}.txt`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
